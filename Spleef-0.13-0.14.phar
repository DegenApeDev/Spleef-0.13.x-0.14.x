<?php __HALT_COMPILER(); ?>
√û		README.md¬¨#Z¬∂V¬¨¬ºY√ø¬∂.gitattributesz#Z¬∂Vz√∂¬æ√≥√¥¬∂
plugin.yml≈ì#Z¬∂V≈ì≈ì~¬Ω¬∂$src/thebigsmileXD/SpleefPE/Start.phpT#Z¬∂VTW√é≈í	¬∂#src/thebigsmileXD/SpleefPE/Main.php√©¬ù#Z¬∂V√©¬ù¬∏¬≥≈∏¬∂#src/thebigsmileXD/SpleefPE/Wait.phpc#Z¬∂Vc¬ß¬¶¬¢¬∂'src/thebigsmileXD/SpleefPE/Teleport.phpO#Z¬∂VO.√ê!√à¬∂resources/config.yml√ô#Z¬∂V√ô√ëÀÜ7‚Ä°¬∂
.gitignore>#Z¬∂V>√Å¬ß ¬∂# SpleefPE
Spleef for PocketMine with effect blocks

### THIS PLUGIN ISN'T FINISHED YET. IT WILL CRASH YOUR SERVER WHEN UNLOADING THE LEVEL DUE TO LEVEL RESET

## Usage
```
/spleef <join|leave|add <worldname>|remove <worldname>|spawns <add|remove|list|tp>>

before anyone can join a map, you have to do:

/spleef add <worldname>

You have to provide an existing map

then, go to the world and add as many spawns as you want. That many players can join the match later

/spleef spawns add

Don't forget to set the number of minimum players in your config.
After that your map is ready to go.

To join do:

/spleef join <mapname>

If you only have 1 map you can also do /spleef join, else /spleef join will let you join a random map
```

## Notes

This plugin was coded and is maintained by thebigsmileXD of the Imagical Corporation. This is not a plugin for everyone, this is a plugin for our intended use. Hopefully you find it useful too.
# Auto detect text files and perform LF normalization
* text=auto

# Custom for Visual Studio
*.cs     diff=csharp

# Standard to msysgit
*.doc	 diff=astextplain
*.DOC	 diff=astextplain
*.docx diff=astextplain
*.DOCX diff=astextplain
*.dot  diff=astextplain
*.DOT  diff=astextplain
*.pdf  diff=astextplain
*.PDF	 diff=astextplain
*.rtf	 diff=astextplain
*.RTF	 diff=astextplain
  name: SpleefPE
  main: thebigsmileXD\SpleefPE\Main
  version: 1.0.0
  api: 1.0.0
  authors: [thebigsmileXD]
  commands:
   spleef:
    description: "Join/Leave SpleefPE Match"
    usage: "/spleef <join|leave|addworld <name>|removeworld <name>|spawns <add|remove|list|tp>>"
    permission: spleef.command
  permissions:
    spleef.command:
      description: Permission for /spleef commands.
      default: true<?php

namespace thebigsmileXD\SpleefPE;

use pocketmine\scheduler\PluginTask;
use pocketmine\plugin\Plugin;
use pocketmine\Player;
use pocketmine\command\ConsoleCommandSender;
use pocketmine\command\Command;
use pocketmine\utils\TextFormat;

class Start extends PluginTask{

	public function __construct(Plugin $owner, $lobby){
		parent::__construct($owner);
		$this->lobby = $lobby;
	}

	public function onRun($currentTick){
		//$this->getOwner()->getLogger()->info("start.php");
		$this->getOwner()->startGame($this->lobby);
	}

	public function cancel(){
		$this->getHandler()->cancel();
	}
}<?php

namespace thebigsmileXD\SpleefPE;

use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\event\Listener;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\TextFormat;
use pocketmine\command\ConsoleCommandSender;
use pocketmine\utils\Config;
use pocketmine\level\Level;
use pocketmine\level\Position;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\block\Block;
use pocketmine\math\Vector3;
use pocketmine\item\Item;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityLevelChangeEvent;
use pocketmine\event\player\PlayerKickEvent;
use pocketmine\entity\Arrow;
use pocketmine\event\entity\EntityDamageByChildEntityEvent;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\entity\Effect;
use pocketmine\event\player\PlayerItemHeldEvent;
use pocketmine\event\level\LevelSaveEvent;

class Main extends PluginBase implements Listener{

	public function onLoad(){
		$this->getLogger()->info(TextFormat::GREEN . "Loading " . $this->getDescription()->getFullName());
	}

	public function onEnable(){
		$this->makeSaveFiles();
		$this->getServer()->getPluginManager()->registerEvents($this, $this);
		$this->getServer()->getLogger()->info(TextFormat::GREEN . "Enabling " . $this->getDescription()->getFullName() . " by " . $this->getDescription()->getAuthors()[0]);
		$this->getPlayerConfig(); // load player config
		$this->games = array();
		$this->getLevelConfig();
		foreach(array_keys($this->level->getAll()) as $levelname){
			if(!$this->getServer()->isLevelLoaded($levelname)){
				$this->getServer()->loadLevel($levelname);
			}
		}
	}

	private function makeSaveFiles(){
		@mkdir($this->getDataFolder());
		$this->saveDefaultConfig();
		if(!$this->getConfig()->get("player-defaults") || empty($this->getConfig()->get("player-defaults"))){
			$this->getConfig()->setNested("player-defaults", array("kills" => 0,"deaths" => 0,"wins" => 0,"played" => 0,"prefix" => ""));
		}
		if(!$this->getConfig()->get("lobby-defaults") || empty($this->getConfig()->get("lobby-defaults"))){
			$this->getConfig()->setNested("lobby-defaults", array("minplayers" => 2,"maxplayers" => 6));
		}
		if(!$this->getConfig()->get("reward-command") || empty($this->getConfig()->get("reward-command"))){
			$this->getConfig()->set("reward-command", "give {PLAYER} diamond 10");
		}
		$this->getConfig()->save();
		$this->saveResource("players.yml");
		$this->saveResource("lobbys.yml");
		$this->getLevelConfig();
		@mkdir($this->getDataFolder() . "/worlds");
		foreach(array_keys($this->level->getAll()) as $levelname){
			$this->copyr($this->getServer()->getDataPath() . "/worlds/" . $levelname, $this->getDataFolder() . "/worlds/" . $levelname);
		}
	}

	public function getPlayerConfig(){
		$this->players = new Config($this->getDataFolder() . "players.yml", Config::YAML);
	}

	public function getLevelConfig(){
		$this->level = new Config($this->getDataFolder() . "level.yml", Config::YAML);
	}

	public function setPlayerConfig(){
		$this->players->save();
		$this->players->reload();
	}

	public function setLevelConfig(){
		$this->level->save();
		$this->level->reload();
	}

	public function onDisable(){
		$this->getServer()->getLogger()->info(TextFormat::RED . "Disabling " . $this->getDescription()->getFullName());
		$this->getLevelConfig();
		foreach(array_keys($this->level->getAll()) as $levelname){
			// $this->deleteDir($this->getServer()->getDataPath() . "/worlds/" . $levelname);
			$this->copyr($this->getDataFolder() . "/worlds/" . $levelname, $this->getServer()->getDataPath() . "/worlds/" . $levelname);
		}
	}

	public function checkPlayer(Player $player){
		if(in_array($player->getName(), $this->players->getAll()["players"])){
			return true;
		}
		return false;
	}

	public function runIngame($sender){
		if($sender instanceof Player) return true;
		else{
			$sender->sendMessage(TextFormat::RED . "Please run this command ingame");
			return false;
		}
	}

	public function getLevelByName($level){
		foreach($this->getServer()->getLevels() as $olevel){
			if(strtolower($olevel->getName()) === strtolower($level)){
				return $olevel;
			}
		}
		// $this->getLogger()->info(TextFormat::RED . "No level called " . $level . " exists");
		return false;
	}

	public function copyr($source, $dest){
		// Check for symlinks
		if(is_link($source)){
			return symlink(readlink($source), $dest);
		}
		
		// Simple copy for a file
		if(is_file($source)){
			return copy($source, $dest);
		}
		
		// Make destination directory
		if(!is_dir($dest)){
			mkdir($dest);
		}
		
		// Loop through the folder
		$dir = dir($source);
		while(false !== $entry = $dir->read()){
			// Skip pointers
			if($entry == '.' || $entry == '..'){
				continue;
			}
			
			// Deep copy directories
			$this->copyr("$source/$entry", "$dest/$entry");
		}
		
		// Clean up
		$dir->close();
		return true;
	}

	public function deleteDir($dirPath){
		if(!is_dir($dirPath)){
			throw new InvalidArgumentException("$dirPath must be a directory");
		}
		if(substr($dirPath, strlen($dirPath) - 1, 1) != '/'){
			$dirPath .= '/';
		}
		$files = glob($dirPath . '*', GLOB_MARK);
		foreach($files as $file){
			if(is_dir($file)){
				$this->deleteDir($file);
			}
			else{
				unlink($file);
			}
		}
		rmdir($dirPath);
	}

	public function onCommand(CommandSender $sender, Command $command, $label, array $args){
		switch($command->getName()){
			case "spleef":
				{
					$command = strtolower($command);
					if(count($args) > 0){
						switch($args[0]){
							case "join":
								{
									if($this->runIngame($sender)){
										if(isset($args[1])){
											if($this->joinLobby($sender, $args[1])){}
										}
										else{
											if($this->joinLobby($sender)){}
										}
										return true;
									}
									else
										return true;
								}
							case "leave":
								{
									if($this->runIngame($sender)){
										$this->leaveLobby($sender, $sender->getLevel());
										return true;
									}
									else
										return true;
								}
							case "addworld":
								{
									if(isset($args[1]) && $this->getLevelByName($args[1])){
										if(isset($args[2]) && is_numeric($args[2]) && isset($args[3]) && is_numeric($args[3])){
											$this->addWorld($sender, $this->getLevelByName($args[1]), $args[2], $args[3]);
											return true;
										}
										else{
											$this->addWorld($sender, $this->getLevelByName($args[1]));
											return true;
										}
									}
									elseif(isset($args[1])){
										$sender->sendMessage(TextFormat::RED . "The world " . TextFormat::AQUA . $args[1] . TextFormat::RED . " doesn't exist, check case\n" . TextFormat::AQUA . $args[1] . TextFormat::RED . " must be a valid ManyWorld-World");
										return true;
									}
									else{
										$sender->sendMessage(TextFormat::RED . "Invalid arguments");
										return false;
									}
								}
							case "removeworld":
								{
									if(isset($args[1]) && $this->getLevelByName($args[1])){
										$this->removeWorld($sender, $this->getLevelByName($args[1]));
										return true;
									}
									elseif(isset($args[1])){
										$sender->sendMessage(TextFormat::RED . "The world " . TextFormat::AQUA . $args[1] . TextFormat::RED . " doesn't exist\n" . TextFormat::AQUA . $args[1] . TextFormat::RED . " must be a valid ManyWorld-World");
										return true;
									}
									else{
										$sender->sendMessage(TextFormat::RED . "Invalid arguments");
										return false;
									}
								}
							case "spawn":
								{
									if($this->runIngame($sender)){
										if(isset($args[1])){
											switch($args[1]){
												case "add":
													{
														$this->addSpawn($sender);
														return true;
													}
												case "tp":
													{
														if(isset($args[2]) && is_numeric($args[2])){
															$this->tpSpawn($sender, strtolower($sender->getLevel()->getName()), intval($args[2]));
															return true;
														}
														else
															return false;
													}
												case "ls":
													{
														$this->listSpawns($sender);
														return true;
													}
												case "rm":
													{
														if(isset($args[2]) && is_numeric($args[2])){
															$this->removeSpawn($sender, intval($args[2]));
															return true;
														}
														else
															return false;
													}
											}
										}
										else
											return false;
									}
									else
										return true;
								}
							case "ls":
								{
									$this->listWorlds($sender);
									return true;
								}
							case "list":
								{
									$this->listWorlds($sender);
									return true;
								}
							case "reset":
								{
									if(isset($args[1])){
										$this->getPlayerConfig();
										if($this->playerExists($args[1])){
											$this->players->remove($args[0]);
											$this->setPlayerConfig();
											$sender->sendMessage(TextFormat::GREEN . "Player " . TextFormat::AQUA . $args[0] . TextFormat::GREEN . " successfully resetted");
											return true;
										}
										else{
											$sender->sendMessage(TextFormat::RED .
